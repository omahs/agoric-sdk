#!/usr/bin/env tsx

import nodeFetch from 'node-fetch';
import fsp from 'node:fs/promises';
import prettier from 'prettier';

import { convertChainInfo } from '@agoric/orchestration/src/utils/registry.js';

import type { IBCInfo, Chains } from '@chain-registry/types';

const fetch = nodeFetch.default;

/**
 * Chain registry running in Starship
 *
 * https://github.com/cosmology-tech/starship/blob/main/starship/proto/registry/service.proto
 *
 * http://localhost:8081/chains
 * http://localhost:8081/chain_ids
 * http://localhost:8081/ibc
 */
const BASE_URL = 'http://localhost:8081/';

const { chains }: { chains: Chains } = await fetch(`${BASE_URL}chains`).then(
  r => r.json(),
);

const ibc: {
  data: IBCInfo[];
} = await fetch(`${BASE_URL}ibc`).then(r => r.json());

// UNTIL https://github.com/cosmology-tech/starship/issues/494
const backmap = {
  agoriclocal: 'agoric',
  osmosislocal: 'osmosis',
  gaialocal: 'cosmoshub',
};
for (const ibcInfo of ibc.data) {
  ibcInfo.chain_1.chain_name = backmap[ibcInfo.chain_1.chain_name];
  ibcInfo.chain_2.chain_name = backmap[ibcInfo.chain_2.chain_name];
  for (const c of ibcInfo.channels) {
    // @ts-expect-error XXX bad typedef
    c.tags.preferred = c.tags.perferred;
  }
}

const chainInfo = await convertChainInfo({
  chains,
  ibcData: ibc.data,
});

const record = JSON.stringify(chainInfo, null, 2);
const src = `/** @file Generated by fetch-starship-chain-info.ts */\nexport default /** @type {const} } */ (${record});`;
const prettySrc = await prettier.format(src, {
  parser: 'babel', // 'typescript' fails to preserve parens for typecast
  singleQuote: true,
  trailingComma: 'all',
});
await fsp.writeFile('./starship-chain-info.js', prettySrc);
