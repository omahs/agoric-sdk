diff --git a/node_modules/@cosmology/telescope/main/helpers/internal-for-bigint.js b/node_modules/@cosmology/telescope/main/helpers/internal-for-bigint.js
index 950827a..9e9214c 100644
--- a/node_modules/@cosmology/telescope/main/helpers/internal-for-bigint.js
+++ b/node_modules/@cosmology/telescope/main/helpers/internal-for-bigint.js
@@ -5,41 +5,11 @@ const getHelperForBigint = (options) => {
     return `${options.aminoEncoding?.customTypes?.useCosmosSDKDec ? `import { Dec } from "@keplr-wallet/unit";
 
   ` : ""}
-declare var self: any | undefined;
-declare var window: any | undefined;
-declare var global: any | undefined;
-var globalThis: any = (() => {
-  if (typeof globalThis !== 'undefined') return globalThis;
-  if (typeof self !== 'undefined') return self;
-  if (typeof window !== 'undefined') return window;
-  if (typeof global !== 'undefined') return global;
-  throw 'Unable to locate global object';
-})();
-
-const atob: (b64: string) => string =
-  globalThis.atob ||
-  ((b64) => globalThis.Buffer.from(b64, 'base64').toString('binary'));
-
-export function bytesFromBase64(b64: string): Uint8Array {
-  const bin = atob(b64);
-  const arr = new Uint8Array(bin.length);
-  for (let i = 0; i < bin.length; ++i) {
-    arr[i] = bin.charCodeAt(i);
-  }
-  return arr;
-}
-
-const btoa: (bin: string) => string =
-  globalThis.btoa ||
-  ((bin) => globalThis.Buffer.from(bin, 'binary').toString('base64'));
+import { encodeBase64, decodeBase64 } from '@endo/base64';
 
-export function base64FromBytes(arr: Uint8Array): string {
-  const bin: string[] = [];
-  arr.forEach((byte) => {
-    bin.push(String.fromCharCode(byte));
-  });
-  return btoa(bin.join(''));
-}
+// use Endo for broader compatibility
+export const bytesFromBase64: (input: string) => Uint8Array = decodeBase64;
+export const base64FromBytes: (input: Uint8Array) => string = encodeBase64;
 
 export interface AminoHeight {
   readonly revision_number?: string;
@@ -252,6 +222,88 @@ export function fromJsonTimestamp(o: any): Timestamp {
 function numberToLong(number: number) {
   return BigInt(Math.trunc(number));
 }
+
+// The largest value we need is 18 (Ether).
+const maxFractionalDigits = 30;
+// Subset of Decimal in @cosmjs/math
+/**
+ * A type for arbitrary precision, non-negative decimals.
+ *
+ * Instances of this class are immutable.
+ */
+export class Decimal {
+  public static fromUserInput(
+    input: string,
+    fractionalDigits: number,
+  ): Decimal {
+    Decimal.verifyFractionalDigits(fractionalDigits);
+
+    const badCharacter = input.match(/[^0-9.]/);
+    if (badCharacter) {
+      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
+      throw new Error(
+        \`Invalid character at position \${badCharacter.index! + 1}\`,
+      );
+    }
+
+    let whole: string;
+    let fractional: string;
+
+    if (input === '') {
+      whole = '0';
+      fractional = '';
+    } else if (input.search(/\./) === -1) {
+      // integer format, no separator
+      whole = input;
+      fractional = '';
+    } else {
+      const parts = input.split('.');
+      switch (parts.length) {
+        case 0:
+        case 1:
+          throw new Error(
+            'Fewer than two elements in split result. This must not happen here.',
+          );
+        case 2:
+          if (!parts[1]) throw new Error('Fractional part missing');
+          whole = parts[0];
+          fractional = parts[1].replace(/0+$/, '');
+          break;
+        default:
+          throw new Error('More than one separator found');
+      }
+    }
+
+    if (fractional.length > fractionalDigits) {
+      throw new Error('Got more fractional digits than supported');
+    }
+
+    const quantity = \`\${whole}\${fractional.padEnd(fractionalDigits, '0')}\`;
+
+    return new Decimal(quantity, fractionalDigits);
+  }
+
+  public static fromAtomics(
+    atomics: string,
+    fractionalDigits: number,
+  ): Decimal {
+    Decimal.verifyFractionalDigits(fractionalDigits);
+    return new Decimal(atomics, fractionalDigits);
+  }
+
+  private static verifyFractionalDigits(fractionalDigits: number): void {
+    if (!Number.isInteger(fractionalDigits))
+      throw new Error('Fractional digits is not an integer');
+    if (fractionalDigits < 0)
+      throw new Error('Fractional digits must not be negative');
+    if (fractionalDigits > maxFractionalDigits) {
+      throw new Error(
+        \`Fractional digits must not exceed \${maxFractionalDigits}\`,
+      );
+    }
+  }
+}
+
 ${options.aminoEncoding?.customTypes?.useCosmosSDKDec ?
         `
 export function padDecimal(decStr: string): string{
diff --git a/node_modules/@cosmology/telescope/main/helpers/internal.js b/node_modules/@cosmology/telescope/main/helpers/internal.js
index b27664f..5cf4c6a 100644
--- a/node_modules/@cosmology/telescope/main/helpers/internal.js
+++ b/node_modules/@cosmology/telescope/main/helpers/internal.js
@@ -5,6 +5,8 @@ const getHelper = (options) => {
     return `import * as _m0 from "protobufjs/minimal";
 import Long from 'long';${options.aminoEncoding?.customTypes?.useCosmosSDKDec ? `
 import { Dec } from "@keplr-wallet/unit";
+import { encodeBase64, decodeBase64 } from '@endo/base64';
+
 ` : ""}
 
 // @ts-ignore
@@ -16,39 +18,9 @@ if (_m0.util.Long !== Long) {
 
 export { Long };
 
-declare var self: any | undefined;
-declare var window: any | undefined;
-declare var global: any | undefined;
-var globalThis: any = (() => {
-    if (typeof globalThis !== 'undefined') return globalThis;
-    if (typeof self !== 'undefined') return self;
-    if (typeof window !== 'undefined') return window;
-    if (typeof global !== 'undefined') return global;
-    throw 'Unable to locate global object';
-})();
-
-const atob: (b64: string) => string =
-    globalThis.atob || ((b64) => globalThis.Buffer.from(b64, 'base64').toString('binary'));
-
-export function bytesFromBase64(b64: string): Uint8Array {
-    const bin = atob(b64);
-    const arr = new Uint8Array(bin.length);
-    for (let i = 0; i < bin.length; ++i) {
-        arr[i] = bin.charCodeAt(i);
-    }
-    return arr;
-}
-
-const btoa: (bin: string) => string =
-    globalThis.btoa || ((bin) => globalThis.Buffer.from(bin, 'binary').toString('base64'));
-
-export function base64FromBytes(arr: Uint8Array): string {
-    const bin: string[] = [];
-    arr.forEach((byte) => {
-        bin.push(String.fromCharCode(byte));
-    });
-    return btoa(bin.join(''));
-}
+// use Endo for broader compatibility
+export const bytesFromBase64: (input: string) => Uint8Array = decodeBase64;
+export const base64FromBytes: (input: Uint8Array) => string = encodeBase64;
 
 export interface AminoHeight {
     readonly revision_number?: string;
@@ -236,7 +208,91 @@ export function fromJsonTimestamp(o: any): Timestamp {
 
 function numberToLong(number: number) {
     return Long.fromNumber(number);
-}${options.aminoEncoding?.customTypes?.useCosmosSDKDec ? `
+}
+
+
+// The largest value we need is 18 (Ether).
+const maxFractionalDigits = 30;
+// Subset of Decimal in @cosmjs/math
+/**
+ * A type for arbitrary precision, non-negative decimals.
+ *
+ * Instances of this class are immutable.
+ */
+export class Decimal {
+  public static fromUserInput(
+    input: string,
+    fractionalDigits: number,
+  ): Decimal {
+    Decimal.verifyFractionalDigits(fractionalDigits);
+
+    const badCharacter = input.match(/[^0-9.]/);
+    if (badCharacter) {
+      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
+      throw new Error(
+        \`Invalid character at position \${badCharacter.index! + 1}\`,
+      );
+    }
+
+    let whole: string;
+    let fractional: string;
+
+    if (input === '') {
+      whole = '0';
+      fractional = '';
+    } else if (input.search(/\./) === -1) {
+      // integer format, no separator
+      whole = input;
+      fractional = '';
+    } else {
+      const parts = input.split('.');
+      switch (parts.length) {
+        case 0:
+        case 1:
+          throw new Error(
+            'Fewer than two elements in split result. This must not happen here.',
+          );
+        case 2:
+          if (!parts[1]) throw new Error('Fractional part missing');
+          whole = parts[0];
+          fractional = parts[1].replace(/0+$/, '');
+          break;
+        default:
+          throw new Error('More than one separator found');
+      }
+    }
+
+    if (fractional.length > fractionalDigits) {
+      throw new Error('Got more fractional digits than supported');
+    }
+
+    const quantity = \`\${whole}\${fractional.padEnd(fractionalDigits, '0')}\`;
+
+    return new Decimal(quantity, fractionalDigits);
+  }
+
+  public static fromAtomics(
+    atomics: string,
+    fractionalDigits: number,
+  ): Decimal {
+    Decimal.verifyFractionalDigits(fractionalDigits);
+    return new Decimal(atomics, fractionalDigits);
+  }
+
+  private static verifyFractionalDigits(fractionalDigits: number): void {
+    if (!Number.isInteger(fractionalDigits))
+      throw new Error('Fractional digits is not an integer');
+    if (fractionalDigits < 0)
+      throw new Error('Fractional digits must not be negative');
+    if (fractionalDigits > maxFractionalDigits) {
+      throw new Error(
+        \`Fractional digits must not exceed \${maxFractionalDigits}\`,
+      );
+    }
+  }
+}
+
+${options.aminoEncoding?.customTypes?.useCosmosSDKDec ? `
 
 export function padDecimal(decStr: string): string{
   return decStr ? new Dec(decStr).toString() : decStr;
diff --git a/node_modules/@cosmology/telescope/main/helpers/internalForBigInt.js b/node_modules/@cosmology/telescope/main/helpers/internalForBigInt.js
index 07b6e47..87c78db 100644
--- a/node_modules/@cosmology/telescope/main/helpers/internalForBigInt.js
+++ b/node_modules/@cosmology/telescope/main/helpers/internalForBigInt.js
@@ -2,41 +2,11 @@
 Object.defineProperty(exports, "__esModule", { value: true });
 exports.internalForBigInt = void 0;
 exports.internalForBigInt = `
-declare var self: any | undefined;
-declare var window: any | undefined;
-declare var global: any | undefined;
-var globalThis: any = (() => {
-  if (typeof globalThis !== 'undefined') return globalThis;
-  if (typeof self !== 'undefined') return self;
-  if (typeof window !== 'undefined') return window;
-  if (typeof global !== 'undefined') return global;
-  throw 'Unable to locate global object';
-})();
-
-const atob: (b64: string) => string =
-  globalThis.atob ||
-  ((b64) => globalThis.Buffer.from(b64, 'base64').toString('binary'));
-
-export function bytesFromBase64(b64: string): Uint8Array {
-  const bin = atob(b64);
-  const arr = new Uint8Array(bin.length);
-  for (let i = 0; i < bin.length; ++i) {
-    arr[i] = bin.charCodeAt(i);
-  }
-  return arr;
-}
+import { encodeBase64, decodeBase64 } from '@endo/base64';
 
-const btoa: (bin: string) => string =
-  globalThis.btoa ||
-  ((bin) => globalThis.Buffer.from(bin, 'binary').toString('base64'));
-
-export function base64FromBytes(arr: Uint8Array): string {
-  const bin: string[] = [];
-  arr.forEach((byte) => {
-    bin.push(String.fromCharCode(byte));
-  });
-  return btoa(bin.join(''));
-}
+// use Endo for broader compatibility
+export const bytesFromBase64: (input: string) => Uint8Array = decodeBase64;
+export const base64FromBytes: (input: Uint8Array) => string = encodeBase64;
 
 export interface AminoHeight {
   readonly revision_number?: string;
diff --git a/node_modules/@cosmology/telescope/main/utils/index.js b/node_modules/@cosmology/telescope/main/utils/index.js
index 998db7f..3301179 100644
--- a/node_modules/@cosmology/telescope/main/utils/index.js
+++ b/node_modules/@cosmology/telescope/main/utils/index.js
@@ -36,7 +36,7 @@ exports.UTILS = {
     bytesFromBase64: '__helpers__',
     BrowserHeaders: 'browser-headers',
     connectComet: '@cosmjs/tendermint-rpc',
-    Decimal: '@cosmjs/math',
+    Decimal: '__helpers__',
     padDecimal: '__helpers__',
     createProtobufRpcClient: '@cosmjs/stargate',
     Pubkey: '@cosmjs/amino',
diff --git a/node_modules/@cosmology/telescope/module/helpers/internal-for-bigint.js b/node_modules/@cosmology/telescope/module/helpers/internal-for-bigint.js
index 1d19b1c..5a9ec29 100644
--- a/node_modules/@cosmology/telescope/module/helpers/internal-for-bigint.js
+++ b/node_modules/@cosmology/telescope/module/helpers/internal-for-bigint.js
@@ -2,41 +2,11 @@ export const getHelperForBigint = (options) => {
     return `${options.aminoEncoding?.customTypes?.useCosmosSDKDec ? `import { Dec } from "@keplr-wallet/unit";
 
   ` : ""}
-declare var self: any | undefined;
-declare var window: any | undefined;
-declare var global: any | undefined;
-var globalThis: any = (() => {
-  if (typeof globalThis !== 'undefined') return globalThis;
-  if (typeof self !== 'undefined') return self;
-  if (typeof window !== 'undefined') return window;
-  if (typeof global !== 'undefined') return global;
-  throw 'Unable to locate global object';
-})();
-
-const atob: (b64: string) => string =
-  globalThis.atob ||
-  ((b64) => globalThis.Buffer.from(b64, 'base64').toString('binary'));
-
-export function bytesFromBase64(b64: string): Uint8Array {
-  const bin = atob(b64);
-  const arr = new Uint8Array(bin.length);
-  for (let i = 0; i < bin.length; ++i) {
-    arr[i] = bin.charCodeAt(i);
-  }
-  return arr;
-}
+import { encodeBase64, decodeBase64 } from '@endo/base64';
 
-const btoa: (bin: string) => string =
-  globalThis.btoa ||
-  ((bin) => globalThis.Buffer.from(bin, 'binary').toString('base64'));
-
-export function base64FromBytes(arr: Uint8Array): string {
-  const bin: string[] = [];
-  arr.forEach((byte) => {
-    bin.push(String.fromCharCode(byte));
-  });
-  return btoa(bin.join(''));
-}
+// use Endo for broader compatibility
+export const bytesFromBase64: (input: string) => Uint8Array = decodeBase64;
+export const base64FromBytes: (input: Uint8Array) => string = encodeBase64;
 
 export interface AminoHeight {
   readonly revision_number?: string;
@@ -249,11 +219,95 @@ export function fromJsonTimestamp(o: any): Timestamp {
 function numberToLong(number: number) {
   return BigInt(Math.trunc(number));
 }
+
+
+// The largest value we need is 18 (Ether).
+const maxFractionalDigits = 30;
+// Subset of Decimal in @cosmjs/math
+/**
+ * A type for arbitrary precision, non-negative decimals.
+ *
+ * Instances of this class are immutable.
+ */
+export class Decimal {
+  public static fromUserInput(
+    input: string,
+    fractionalDigits: number,
+  ): Decimal {
+    Decimal.verifyFractionalDigits(fractionalDigits);
+
+    const badCharacter = input.match(/[^0-9.]/);
+    if (badCharacter) {
+      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
+      throw new Error(
+        \`Invalid character at position \${badCharacter.index! + 1}\`,
+      );
+    }
+
+    let whole: string;
+    let fractional: string;
+
+    if (input === '') {
+      whole = '0';
+      fractional = '';
+    } else if (input.search(/\./) === -1) {
+      // integer format, no separator
+      whole = input;
+      fractional = '';
+    } else {
+      const parts = input.split('.');
+      switch (parts.length) {
+        case 0:
+        case 1:
+          throw new Error(
+            'Fewer than two elements in split result. This must not happen here.',
+          );
+        case 2:
+          if (!parts[1]) throw new Error('Fractional part missing');
+          whole = parts[0];
+          fractional = parts[1].replace(/0+$/, '');
+          break;
+        default:
+          throw new Error('More than one separator found');
+      }
+    }
+
+    if (fractional.length > fractionalDigits) {
+      throw new Error('Got more fractional digits than supported');
+    }
+
+    const quantity = \`\${whole}\${fractional.padEnd(fractionalDigits, '0')}\`;
+
+    return new Decimal(quantity, fractionalDigits);
+  }
+
+  public static fromAtomics(
+    atomics: string,
+    fractionalDigits: number,
+  ): Decimal {
+    Decimal.verifyFractionalDigits(fractionalDigits);
+    return new Decimal(atomics, fractionalDigits);
+  }
+
+  private static verifyFractionalDigits(fractionalDigits: number): void {
+    if (!Number.isInteger(fractionalDigits))
+      throw new Error('Fractional digits is not an integer');
+    if (fractionalDigits < 0)
+      throw new Error('Fractional digits must not be negative');
+    if (fractionalDigits > maxFractionalDigits) {
+      throw new Error(
+        \`Fractional digits must not exceed \${maxFractionalDigits}\`,
+      );
+    }
+  }
+}
+
 ${options.aminoEncoding?.customTypes?.useCosmosSDKDec ?
         `
 export function padDecimal(decStr: string): string{
   return decStr ? new Dec(decStr).toString() : decStr;
 }
+
 ` : ""}
 `;
 };
diff --git a/node_modules/@cosmology/telescope/module/helpers/internal.js b/node_modules/@cosmology/telescope/module/helpers/internal.js
index 28e50cf..c713941 100644
--- a/node_modules/@cosmology/telescope/module/helpers/internal.js
+++ b/node_modules/@cosmology/telescope/module/helpers/internal.js
@@ -2,6 +2,7 @@ export const getHelper = (options) => {
     return `import * as _m0 from "protobufjs/minimal";
 import Long from 'long';${options.aminoEncoding?.customTypes?.useCosmosSDKDec ? `
 import { Dec } from "@keplr-wallet/unit";
+import { encodeBase64, decodeBase64 } from '@endo/base64';
 ` : ""}
 
 // @ts-ignore
@@ -13,39 +14,9 @@ if (_m0.util.Long !== Long) {
 
 export { Long };
 
-declare var self: any | undefined;
-declare var window: any | undefined;
-declare var global: any | undefined;
-var globalThis: any = (() => {
-    if (typeof globalThis !== 'undefined') return globalThis;
-    if (typeof self !== 'undefined') return self;
-    if (typeof window !== 'undefined') return window;
-    if (typeof global !== 'undefined') return global;
-    throw 'Unable to locate global object';
-})();
-
-const atob: (b64: string) => string =
-    globalThis.atob || ((b64) => globalThis.Buffer.from(b64, 'base64').toString('binary'));
-
-export function bytesFromBase64(b64: string): Uint8Array {
-    const bin = atob(b64);
-    const arr = new Uint8Array(bin.length);
-    for (let i = 0; i < bin.length; ++i) {
-        arr[i] = bin.charCodeAt(i);
-    }
-    return arr;
-}
-
-const btoa: (bin: string) => string =
-    globalThis.btoa || ((bin) => globalThis.Buffer.from(bin, 'binary').toString('base64'));
-
-export function base64FromBytes(arr: Uint8Array): string {
-    const bin: string[] = [];
-    arr.forEach((byte) => {
-        bin.push(String.fromCharCode(byte));
-    });
-    return btoa(bin.join(''));
-}
+// use Endo for broader compatibility
+export const bytesFromBase64: (input: string) => Uint8Array = decodeBase64;
+export const base64FromBytes: (input: Uint8Array) => string = encodeBase64;
 
 export interface AminoHeight {
     readonly revision_number?: string;
@@ -231,6 +202,87 @@ export function fromJsonTimestamp(o: any): Timestamp {
   }
 }
 
+// The largest value we need is 18 (Ether).
+const maxFractionalDigits = 30;
+// Subset of Decimal in @cosmjs/math
+/**
+ * A type for arbitrary precision, non-negative decimals.
+ *
+ * Instances of this class are immutable.
+ */
+export class Decimal {
+  public static fromUserInput(
+    input: string,
+    fractionalDigits: number,
+  ): Decimal {
+    Decimal.verifyFractionalDigits(fractionalDigits);
+
+    const badCharacter = input.match(/[^0-9.]/);
+    if (badCharacter) {
+      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
+      throw new Error(
+        \`Invalid character at position \${badCharacter.index! + 1}\`,
+      );
+    }
+
+    let whole: string;
+    let fractional: string;
+
+    if (input === '') {
+      whole = '0';
+      fractional = '';
+    } else if (input.search(/\./) === -1) {
+      // integer format, no separator
+      whole = input;
+      fractional = '';
+    } else {
+      const parts = input.split('.');
+      switch (parts.length) {
+        case 0:
+        case 1:
+          throw new Error(
+            'Fewer than two elements in split result. This must not happen here.',
+          );
+        case 2:
+          if (!parts[1]) throw new Error('Fractional part missing');
+          whole = parts[0];
+          fractional = parts[1].replace(/0+$/, '');
+          break;
+        default:
+          throw new Error('More than one separator found');
+      }
+    }
+
+    if (fractional.length > fractionalDigits) {
+      throw new Error('Got more fractional digits than supported');
+    }
+
+    const quantity = \`\${whole}\${fractional.padEnd(fractionalDigits, '0')}\`;
+
+    return new Decimal(quantity, fractionalDigits);
+  }
+
+  public static fromAtomics(
+    atomics: string,
+    fractionalDigits: number,
+  ): Decimal {
+    Decimal.verifyFractionalDigits(fractionalDigits);
+    return new Decimal(atomics, fractionalDigits);
+  }
+
+  private static verifyFractionalDigits(fractionalDigits: number): void {
+    if (!Number.isInteger(fractionalDigits))
+      throw new Error('Fractional digits is not an integer');
+    if (fractionalDigits < 0)
+      throw new Error('Fractional digits must not be negative');
+    if (fractionalDigits > maxFractionalDigits) {
+      throw new Error(
+        \`Fractional digits must not exceed \${maxFractionalDigits}\`,
+      );
+    }
+  }
+}
+
 function numberToLong(number: number) {
     return Long.fromNumber(number);
 }${options.aminoEncoding?.customTypes?.useCosmosSDKDec ? `
@@ -238,6 +290,7 @@ function numberToLong(number: number) {
 export function padDecimal(decStr: string): string{
   return decStr ? new Dec(decStr).toString() : decStr;
 }
+
 ` : ""}
 `;
 };
diff --git a/node_modules/@cosmology/telescope/module/helpers/internalForBigInt.js b/node_modules/@cosmology/telescope/module/helpers/internalForBigInt.js
index ecb2e3e..4e96aff 100644
--- a/node_modules/@cosmology/telescope/module/helpers/internalForBigInt.js
+++ b/node_modules/@cosmology/telescope/module/helpers/internalForBigInt.js
@@ -1,39 +1,9 @@
 export const internalForBigInt = `
-declare var self: any | undefined;
-declare var window: any | undefined;
-declare var global: any | undefined;
-var globalThis: any = (() => {
-  if (typeof globalThis !== 'undefined') return globalThis;
-  if (typeof self !== 'undefined') return self;
-  if (typeof window !== 'undefined') return window;
-  if (typeof global !== 'undefined') return global;
-  throw 'Unable to locate global object';
-})();
-
-const atob: (b64: string) => string =
-  globalThis.atob ||
-  ((b64) => globalThis.Buffer.from(b64, 'base64').toString('binary'));
-
-export function bytesFromBase64(b64: string): Uint8Array {
-  const bin = atob(b64);
-  const arr = new Uint8Array(bin.length);
-  for (let i = 0; i < bin.length; ++i) {
-    arr[i] = bin.charCodeAt(i);
-  }
-  return arr;
-}
+import { encodeBase64, decodeBase64 } from '@endo/base64';
 
-const btoa: (bin: string) => string =
-  globalThis.btoa ||
-  ((bin) => globalThis.Buffer.from(bin, 'binary').toString('base64'));
-
-export function base64FromBytes(arr: Uint8Array): string {
-  const bin: string[] = [];
-  arr.forEach((byte) => {
-    bin.push(String.fromCharCode(byte));
-  });
-  return btoa(bin.join(''));
-}
+// use Endo for broader compatibility
+export const bytesFromBase64: (input: string) => Uint8Array = decodeBase64;
+export const base64FromBytes: (input: Uint8Array) => string = encodeBase64;
 
 export interface AminoHeight {
   readonly revision_number?: string;
diff --git a/node_modules/@cosmology/telescope/module/utils/index.js b/node_modules/@cosmology/telescope/module/utils/index.js
index aa561fd..21c4e00 100644
--- a/node_modules/@cosmology/telescope/module/utils/index.js
+++ b/node_modules/@cosmology/telescope/module/utils/index.js
@@ -18,7 +18,7 @@ export const UTILS = {
     bytesFromBase64: '__helpers__',
     BrowserHeaders: 'browser-headers',
     connectComet: '@cosmjs/tendermint-rpc',
-    Decimal: '@cosmjs/math',
+    Decimal: '__helpers__',
     padDecimal: '__helpers__',
     createProtobufRpcClient: '@cosmjs/stargate',
     Pubkey: '@cosmjs/amino',
diff --git a/node_modules/@cosmology/telescope/src/helpers/internal-for-bigint.ts b/node_modules/@cosmology/telescope/src/helpers/internal-for-bigint.ts
index f7daa3d..555ffda 100644
--- a/node_modules/@cosmology/telescope/src/helpers/internal-for-bigint.ts
+++ b/node_modules/@cosmology/telescope/src/helpers/internal-for-bigint.ts
@@ -4,41 +4,11 @@ export const getHelperForBigint = (options: TelescopeOptions) => {
   return `${options.aminoEncoding?.customTypes?.useCosmosSDKDec ? `import { Dec } from "@keplr-wallet/unit";
 
   `: ""}
-declare var self: any | undefined;
-declare var window: any | undefined;
-declare var global: any | undefined;
-var globalThis: any = (() => {
-  if (typeof globalThis !== 'undefined') return globalThis;
-  if (typeof self !== 'undefined') return self;
-  if (typeof window !== 'undefined') return window;
-  if (typeof global !== 'undefined') return global;
-  throw 'Unable to locate global object';
-})();
-
-const atob: (b64: string) => string =
-  globalThis.atob ||
-  ((b64) => globalThis.Buffer.from(b64, 'base64').toString('binary'));
-
-export function bytesFromBase64(b64: string): Uint8Array {
-  const bin = atob(b64);
-  const arr = new Uint8Array(bin.length);
-  for (let i = 0; i < bin.length; ++i) {
-    arr[i] = bin.charCodeAt(i);
-  }
-  return arr;
-}
-
-const btoa: (bin: string) => string =
-  globalThis.btoa ||
-  ((bin) => globalThis.Buffer.from(bin, 'binary').toString('base64'));
+import { encodeBase64, decodeBase64 } from '@endo/base64';
 
-export function base64FromBytes(arr: Uint8Array): string {
-  const bin: string[] = [];
-  arr.forEach((byte) => {
-    bin.push(String.fromCharCode(byte));
-  });
-  return btoa(bin.join(''));
-}
+// use Endo for broader compatibility
+export const bytesFromBase64: (input: string) => Uint8Array = decodeBase64;
+export const base64FromBytes: (input: Uint8Array) => string = encodeBase64;
 
 export interface AminoHeight {
   readonly revision_number?: string;
@@ -251,6 +221,88 @@ export function fromJsonTimestamp(o: any): Timestamp {
 function numberToLong(number: number) {
   return BigInt(Math.trunc(number));
 }
+
+// The largest value we need is 18 (Ether).
+const maxFractionalDigits = 30;
+// Subset of Decimal in @cosmjs/math
+/**
+ * A type for arbitrary precision, non-negative decimals.
+ *
+ * Instances of this class are immutable.
+ */
+export class Decimal {
+  public static fromUserInput(
+    input: string,
+    fractionalDigits: number,
+  ): Decimal {
+    Decimal.verifyFractionalDigits(fractionalDigits);
+
+    const badCharacter = input.match(/[^0-9.]/);
+    if (badCharacter) {
+      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
+      throw new Error(
+        \`Invalid character at position \${badCharacter.index! + 1}\`,
+      );
+    }
+
+    let whole: string;
+    let fractional: string;
+
+    if (input === '') {
+      whole = '0';
+      fractional = '';
+    } else if (input.search(/\./) === -1) {
+      // integer format, no separator
+      whole = input;
+      fractional = '';
+    } else {
+      const parts = input.split('.');
+      switch (parts.length) {
+        case 0:
+        case 1:
+          throw new Error(
+            'Fewer than two elements in split result. This must not happen here.',
+          );
+        case 2:
+          if (!parts[1]) throw new Error('Fractional part missing');
+          whole = parts[0];
+          fractional = parts[1].replace(/0+$/, '');
+          break;
+        default:
+          throw new Error('More than one separator found');
+      }
+    }
+
+    if (fractional.length > fractionalDigits) {
+      throw new Error('Got more fractional digits than supported');
+    }
+
+    const quantity = \`\${whole}\${fractional.padEnd(fractionalDigits, '0')}\`;
+
+    return new Decimal(quantity, fractionalDigits);
+  }
+
+  public static fromAtomics(
+    atomics: string,
+    fractionalDigits: number,
+  ): Decimal {
+    Decimal.verifyFractionalDigits(fractionalDigits);
+    return new Decimal(atomics, fractionalDigits);
+  }
+
+  private static verifyFractionalDigits(fractionalDigits: number): void {
+    if (!Number.isInteger(fractionalDigits))
+      throw new Error('Fractional digits is not an integer');
+    if (fractionalDigits < 0)
+      throw new Error('Fractional digits must not be negative');
+    if (fractionalDigits > maxFractionalDigits) {
+      throw new Error(
+        \`Fractional digits must not exceed \${maxFractionalDigits}\`,
+      );
+    }
+  }
+}
+
 ${
   options.aminoEncoding?.customTypes?.useCosmosSDKDec ?
 `
diff --git a/node_modules/@cosmology/telescope/src/helpers/internal.ts b/node_modules/@cosmology/telescope/src/helpers/internal.ts
index fc58715..98a1582 100644
--- a/node_modules/@cosmology/telescope/src/helpers/internal.ts
+++ b/node_modules/@cosmology/telescope/src/helpers/internal.ts
@@ -4,6 +4,8 @@ export const getHelper = (options: TelescopeOptions) => {
   return `import * as _m0 from "protobufjs/minimal";
 import Long from 'long';${options.aminoEncoding?.customTypes?.useCosmosSDKDec ? `
 import { Dec } from "@keplr-wallet/unit";
+import { encodeBase64, decodeBase64 } from '@endo/base64';
+
 `: ""}
 
 // @ts-ignore
@@ -15,39 +17,9 @@ if (_m0.util.Long !== Long) {
 
 export { Long };
 
-declare var self: any | undefined;
-declare var window: any | undefined;
-declare var global: any | undefined;
-var globalThis: any = (() => {
-    if (typeof globalThis !== 'undefined') return globalThis;
-    if (typeof self !== 'undefined') return self;
-    if (typeof window !== 'undefined') return window;
-    if (typeof global !== 'undefined') return global;
-    throw 'Unable to locate global object';
-})();
-
-const atob: (b64: string) => string =
-    globalThis.atob || ((b64) => globalThis.Buffer.from(b64, 'base64').toString('binary'));
-
-export function bytesFromBase64(b64: string): Uint8Array {
-    const bin = atob(b64);
-    const arr = new Uint8Array(bin.length);
-    for (let i = 0; i < bin.length; ++i) {
-        arr[i] = bin.charCodeAt(i);
-    }
-    return arr;
-}
-
-const btoa: (bin: string) => string =
-    globalThis.btoa || ((bin) => globalThis.Buffer.from(bin, 'binary').toString('base64'));
-
-export function base64FromBytes(arr: Uint8Array): string {
-    const bin: string[] = [];
-    arr.forEach((byte) => {
-        bin.push(String.fromCharCode(byte));
-    });
-    return btoa(bin.join(''));
-}
+// use Endo for broader compatibility
+export const bytesFromBase64: (input: string) => Uint8Array = decodeBase64;
+export const base64FromBytes: (input: Uint8Array) => string = encodeBase64;
 
 export interface AminoHeight {
     readonly revision_number?: string;
@@ -233,6 +205,87 @@ export function fromJsonTimestamp(o: any): Timestamp {
   }
 }
 
+// The largest value we need is 18 (Ether).
+const maxFractionalDigits = 30;
+// Subset of Decimal in @cosmjs/math
+/**
+ * A type for arbitrary precision, non-negative decimals.
+ *
+ * Instances of this class are immutable.
+ */
+export class Decimal {
+  public static fromUserInput(
+    input: string,
+    fractionalDigits: number,
+  ): Decimal {
+    Decimal.verifyFractionalDigits(fractionalDigits);
+
+    const badCharacter = input.match(/[^0-9.]/);
+    if (badCharacter) {
+      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
+      throw new Error(
+        \`Invalid character at position \${badCharacter.index! + 1}\`,
+      );
+    }
+
+    let whole: string;
+    let fractional: string;
+
+    if (input === '') {
+      whole = '0';
+      fractional = '';
+    } else if (input.search(/\./) === -1) {
+      // integer format, no separator
+      whole = input;
+      fractional = '';
+    } else {
+      const parts = input.split('.');
+      switch (parts.length) {
+        case 0:
+        case 1:
+          throw new Error(
+            'Fewer than two elements in split result. This must not happen here.',
+          );
+        case 2:
+          if (!parts[1]) throw new Error('Fractional part missing');
+          whole = parts[0];
+          fractional = parts[1].replace(/0+$/, '');
+          break;
+        default:
+          throw new Error('More than one separator found');
+      }
+    }
+
+    if (fractional.length > fractionalDigits) {
+      throw new Error('Got more fractional digits than supported');
+    }
+
+    const quantity = \`\${whole}\${fractional.padEnd(fractionalDigits, '0')}\`;
+
+    return new Decimal(quantity, fractionalDigits);
+  }
+
+  public static fromAtomics(
+    atomics: string,
+    fractionalDigits: number,
+  ): Decimal {
+    Decimal.verifyFractionalDigits(fractionalDigits);
+    return new Decimal(atomics, fractionalDigits);
+  }
+
+  private static verifyFractionalDigits(fractionalDigits: number): void {
+    if (!Number.isInteger(fractionalDigits))
+      throw new Error('Fractional digits is not an integer');
+    if (fractionalDigits < 0)
+      throw new Error('Fractional digits must not be negative');
+    if (fractionalDigits > maxFractionalDigits) {
+      throw new Error(
+        \`Fractional digits must not exceed \${maxFractionalDigits}\`,
+      );
+    }
+  }
+}
+
 function numberToLong(number: number) {
     return Long.fromNumber(number);
 }${options.aminoEncoding?.customTypes?.useCosmosSDKDec ? `
diff --git a/node_modules/@cosmology/telescope/src/utils/index.ts b/node_modules/@cosmology/telescope/src/utils/index.ts
index 1ed202f..6d2cc38 100644
--- a/node_modules/@cosmology/telescope/src/utils/index.ts
+++ b/node_modules/@cosmology/telescope/src/utils/index.ts
@@ -21,7 +21,7 @@ export const UTILS = {
   bytesFromBase64: '__helpers__',
   BrowserHeaders: 'browser-headers',
   connectComet: '@cosmjs/tendermint-rpc',
-  Decimal: '@cosmjs/math',
+  Decimal: '__helpers__',
   padDecimal: '__helpers__',
   createProtobufRpcClient: '@cosmjs/stargate',
   Pubkey: '@cosmjs/amino',
